{"version":3,"sources":["components/snake/constants/constants.js","components/snake/components/SnakeBoard.js","components/snake/components/SnakeBody.js","components/snake/components/SnakeFood.js","components/snake/components/Slider.js","components/snake/actions/snake-actions.js","components/snake/actions/game-actions.js","components/snake/actions/food-actions.js","components/snake/actions/slider-actions.js","components/snake/components/SnakeGame.js","components/snake/reducers/snake-reducer.js","components/snake/reducers/food-reducer.js","components/snake/reducers/game-reducer.js","components/snake/reducers/slider-reducer.js","components/snake/reducers/reducers.js","components/snake/components/SnakeGameProvider.js","App.js","serviceWorker.js","index.js"],"names":["SQUARE_SIZE","INITIAL_DIRECTION","Board","props","board","x","size","y","style","width","height","react_default","a","createElement","className","align","map","row","column","key","cell","cellIndex","SnakeBody","coords","index","left","top","background","lost","SnakeFood","Slider","handleChange","value","e","_this","onChange","preventDefault","this","label","lib_default","orientation","min","minValue","max","maxValue","tooltip","Component","moveSnake","snake","boardSize","borderless","direction","slice","headCoords","length","headMap","DOWN","UP","LEFT","RIGHT","push","shift","type","setDirection","prependSnake","newGame","loseGame","incrementScore","setFood","food","changeBoardSize","changeGameSpeed","speed","slider","SnakeGame","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBoardSizeChange","resetGame","handleGameSpeedChange","handleBorderlessSwitch","directionOnNextTick","bind","assertThisInitialized","checkGameLoss","checkCollision","setControls","generateNewFood","checkFoodCollision","snakeCoords","snakeHeadCoords","game","clearInterval","snakeInterval","arrCoords","some","foodCoords","Math","floor","random","_this2","document","addEventListener","keyCode","setInterval","score","highScore","Grid_default","container","spacing","justify","alignItems","item","components_Slider","react_switch_default","checked","onColor","connect","dispatch","bindActionCreators","INITIAL_STATE","INITIAL_BOARD_SIZE","updateHighScore","_ref","rootReducer","combineReducers","state","arguments","undefined","action","objectSpread","concat","toConsumableArray","store","createStore","reducer","SnakeGameProvider","es","components_SnakeGame","App","SnakeGameProvider_SnakeGameProvider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1cc919c.chunk.js","sourcesContent":["/**\n * Constants which the game uses to run.\n */\nexport const INITIAL_BOARD_SIZE = 18;\nexport const MAX_BOARD_SIZE = 20;\nexport const MIN_BOARD_SIZE = 15;\nexport const MIN_GAME_SPEED = 0;\nexport const INITIAL_GAME_SPEED = 20;\nexport const MAX_GAME_SPEED = 50;\nexport const SQUARE_SIZE = 20;\nexport const INITIAL_DIRECTION  = 'DOWN';","import React from 'react';\nimport '../../../styles/snake/snakeBoard.css';\nimport {SQUARE_SIZE} from '../constants/constants';\n\n/**\n * Renders board for snake and food to be rendered\n * on top of.\n * The Board is composed of rows, made up of individual elements.\n */\nexport default function Board(props) {\n\tlet board = [];\n\t// Adds coords to board based on size from slider - not currently used\n\tfor(let x = 0; x < props.size; x++) {\n\t\tboard[x] = [];\n\t\tfor(let y = 0; y < props.size; y++) {\n\t\t\tboard[x][y] = '';\n\t\t}\n\t}\n\n\tlet style = {\n\t\twidth: SQUARE_SIZE,\n\t\theight: SQUARE_SIZE,\n\t};\n\n\treturn (\n\t\t<div className=\"snakeBoard\" align=\"centre\">\n\t\t\t{\n\t\t\t\tboard.map((row, column) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"snakeBoardRow\" key={column}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trow.map((cell, cellIndex) => <div className=\"snakeBoardCell\" style={style} key={cellIndex} />)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}","import React from 'react';\nimport {SQUARE_SIZE} from \"../constants/constants\";\nimport '../../../styles/snake/snakeBody.css';\n\n/**\n * Renders snake on top of the board.\n * The snake will turn red if it runs over the border.\n */\nexport default function(props) {\n\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tprops.coords.map((coords, index) => {\n                        const style = {\n                            left: coords[0] * SQUARE_SIZE + 'px',\n                            top: coords[1] * SQUARE_SIZE + 'px',\n                            background: props.lost ? 'darkred' : '',\n\t\t\t\t\t\t\t width: SQUARE_SIZE,\n\t\t\t\t\t\t\t height: SQUARE_SIZE,\n                        };\n                        return <div className=\"snakeBody\" style={style} key={index}/>\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}","import React from 'react';\nimport { SQUARE_SIZE } from '../constants/constants';\nimport '../../../styles/snake/snakeFood.css';\n\n/**\n * Returns a <div/> element representing a piece of food.\n */\nexport default function(props) {\n\tlet style = {\n\t\tleft: props.coords[0] * SQUARE_SIZE + 'px', // position\n\t\ttop: props.coords[1] * SQUARE_SIZE + 'px', // position\n\t\twidth: SQUARE_SIZE,\n\t\theight: SQUARE_SIZE,\n\t}\n\n\treturn (\n\t\t<div className=\"snakeFood\" style={style} />\n\t);\n}","import React, { Component } from 'react';\r\nimport RangeSlider from 'react-rangeslider';\r\nimport 'react-rangeslider/lib/index.css'\r\nimport '../../../styles/slider/slider.css';\r\n\r\nclass Slider extends Component {\r\n\r\n    handleChange = (value, e) => {\r\n        this.props.onChange(value);\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"sliderComponent\">\r\n                <div className=\"sliderLabel\">{this.props.label}</div>\r\n                <RangeSlider className=\"rangeSlider\" value={this.props.value}\r\n                        orientation=\"vertical\"\r\n                        min={this.props.minValue}\r\n                        max={this.props.maxValue}\r\n                        tooltip={false}\r\n                        onChange={this.handleChange}/>\r\n                <div className=\"sliderValue\">{this.props.value}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slider;","/**\r\n * These actions take the snake and define the next cycle\r\n * for rendering.\r\n *\r\n * @param snake\r\n * @returns {{type: string, coords: *}}\r\n */\r\nexport function moveSnake(snake, boardSize, borderless) {\r\n    const direction = snake.direction; // take snake direction\r\n    let coords = snake.coords.slice(); // take snake coords\r\n    const headCoords = coords[coords.length-1];\r\n    const headMap = { // map selected direction to next move\r\n        DOWN: borderless ? [headCoords[0], headCoords[1] == boardSize-1 ? 0 : headCoords[1]+1]\r\n                : [headCoords[0], headCoords[1]+1], // if not in borderless mode then increment\r\n        UP: borderless ? [headCoords[0], headCoords[1] == 0 ? boardSize-1 : headCoords[1]-1]\r\n                : [headCoords[0], headCoords[1]-1], // if not in borderless mode then increment\r\n        LEFT: borderless ? [headCoords[0] == 0 ? boardSize-1 : headCoords[0]-1, headCoords[1]]\r\n                : [headCoords[0]-1, headCoords[1]], // etc\r\n        RIGHT: borderless ? [headCoords[0] == boardSize-1 ? 0 : headCoords[0]+1, headCoords[1]]\r\n                : [headCoords[0]+1, headCoords[1]], // etc\r\n    };\r\n\r\n    coords.push(headMap[direction]); // add next coords + moves\r\n    coords.shift(); // removes the first element (i.e. last section of the snake)\r\n\r\n    return {\r\n        type: 'MOVE_SNAKE',\r\n        coords: coords,\r\n    }\r\n}\r\n\r\nexport function setDirection(direction) {\r\n    return {\r\n        type: 'SET_DIRECTION',\r\n        direction\r\n    }\r\n}\r\n\r\nexport function prependSnake(coords) {\r\n    return {\r\n        type: 'PREPEND_SNAKE',\r\n        coords: coords\r\n    }\r\n}","export function newGame() {\r\n    return {\r\n        type: 'NEW_GAME'\r\n    }\r\n}\r\n\r\nexport function loseGame() {\r\n    return {\r\n        type: 'LOSE_GAME'\r\n    }\r\n}\r\n\r\nexport function incrementScore() {\r\n    return {\r\n        type: 'INCREMENT_SCORE'\r\n    }\r\n}\r\n\r\nexport function borderless() {\r\n        return {\r\n            type: 'BORDERLESS'\r\n        }\r\n}\r\n","export function setFood(coords) {\r\n    return {\r\n        type: 'SET_FOOD',\r\n        food: coords\r\n    }\r\n}","export function changeBoardSize(size) {\r\n    return {\r\n        type: 'CHANGE_BOARD_SIZE',\r\n        boardSize: size\r\n    }\r\n}\r\n\r\nexport function changeGameSpeed(speed) {\r\n    return {\r\n        type: 'CHANGE_GAME_SPEED',\r\n        slider: speed,\r\n    }\r\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Switch from 'react-switch';\nimport { bindActionCreators } from 'redux';\nimport {INITIAL_DIRECTION, MAX_GAME_SPEED, MIN_GAME_SPEED, MIN_BOARD_SIZE, MAX_BOARD_SIZE} from '../constants/constants';\nimport Board from './SnakeBoard';\nimport Snake from './SnakeBody';\nimport Food from './SnakeFood';\nimport Slider from './Slider';\nimport { moveSnake, setDirection, prependSnake } from '../actions/snake-actions';\nimport { newGame, loseGame, incrementScore, borderless } from '../actions/game-actions';\nimport { setFood } from '../actions/food-actions';\nimport { changeBoardSize, changeGameSpeed} from \"../actions/slider-actions\";\nimport '../../../styles/snake/snake.css';\nimport '../../../styles/buttons/switch.css';\nimport Grid from '@material-ui/core/Grid';\n\nclass SnakeGame extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.directionOnNextTick = INITIAL_DIRECTION;\n\t\tthis.resetGame = this.resetGame.bind(this);\n\t\tthis.checkGameLoss = this.checkGameLoss.bind(this);\n\t\tthis.handleBoardSizeChange = this.handleBoardSizeChange.bind(this);\n\t\tthis.handleGameSpeedChange = this.handleGameSpeedChange.bind(this);\n\t\tthis.checkCollision = this.checkCollision.bind(this);\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.setControls();\n\t\tthis.generateNewFood();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.checkFoodCollision();\n\t\tthis.checkGameLoss();\n\t}\n\n\tcheckGameLoss() {\n\t\tconst snakeCoords = this.props.snake.coords;\n\t\tconst snakeHeadCoords = snakeCoords[snakeCoords.length-1];\n\n\t\t// if collide with self, then lose\n\t\tif (!this.props.game.lost && this.checkCollision(snakeHeadCoords, snakeCoords.slice(0,-1))) {\n            clearInterval(this.snakeInterval);\n\t\t    this.props.loseGame();\n        }\n\n\t\t// if game is borderless & you collide with wall then lose\n\t\tif(!this.props.game.lost\n            && !this.props.game.borderless\n            && (snakeHeadCoords[0] === -1 ||\n\t\t\t\tsnakeHeadCoords[0] === this.props.slider.boardSize ||\n\t\t\t\tsnakeHeadCoords[1] === -1 ||\n\t\t\t\tsnakeHeadCoords[1] === this.props.slider.boardSize)\n            ) {\n\t\t\tclearInterval(this.snakeInterval);\n\t\t\tthis.props.loseGame();\n\t\t}\n\t}\n\n\t/**\n\t * Checks that snake hasn't collided with self\n\t **/\n    checkCollision(snakeHeadCoords, arrCoords) {\n        return arrCoords.some(coords => coords[0] === snakeHeadCoords[0] && coords[1] === snakeHeadCoords[1]);\n    }\n\n\tcheckFoodCollision() {\n\t\tconst snakeCoords = this.props.snake.coords;\n\t\tconst snakeHeadCoords = snakeCoords[snakeCoords.length-1];\n\t\tconst foodCoords = this.props.food;\n\n\t\t// if it ate a piece of food\n\t\tif(snakeHeadCoords[0] === foodCoords[0] && snakeHeadCoords[1] === foodCoords[1]) {\n\t\t\tthis.generateNewFood();\n\t\t\tthis.props.incrementScore();\n\t\t\tthis.props.prependSnake(snakeCoords[snakeCoords.length-1].slice());\n\t\t}\n\t}\n\n\tresetGame() {\n\t\tthis.props.newGame();\n\t\tthis.generateNewFood();\n\t\tclearInterval(this.snakeInterval);\n\t\tthis.directionOnNextTick = 'DOWN';\n\t}\n\n\tgenerateNewFood() {\n\t\tconst x = Math.floor(Math.random() * this.props.slider.boardSize);\n\t\tconst y = Math.floor(Math.random() * this.props.slider.boardSize);\n\t\tif(this.checkCollision([x, y], this.props.snake.coords)) this.generateNewFood();\n\t\telse this.props.setFood([x, y]);\n\t}\n\n\tsetControls() {\n\t\tdocument.addEventListener('keydown', e => {\n\t\t    e.preventDefault();\n            switch(e.keyCode) {\n\n\t\t\t\tcase 65: // A key\n\t\t\t\tcase 37: // left arrow\n\t\t\t\t\t// make sure we're not trying to move into the snake's body\n\t\t\t\t\t// or move outside the boundaries\n\t\t\t\t\tif(this.props.snake.direction !== 'RIGHT') this.directionOnNextTick = 'LEFT';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 68: // D key\n\t\t\t\tcase 39: // right arrow\n\t\t\t\t\tif(this.props.snake.direction !== 'LEFT') this.directionOnNextTick = 'RIGHT';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83: // S key\n\t\t\t\tcase 40: // down arrow\n\t\t\t\t\tif(this.props.snake.direction !== 'UP') this.directionOnNextTick = 'DOWN';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 87: // W key\n\t\t\t\tcase 38: // up arrow\n\t\t\t\t\tif(this.props.snake.direction !== 'DOWN') this.directionOnNextTick = 'UP';\n\t\t\t\t\tbreak;\n                case 32: // space\n\t\t\t\t\tif(this.props.game.lost) this.resetGame();\n\t\t\t\t\tclearInterval(this.snakeInterval);\n\t\t\t\t\tthis.snakeInterval = setInterval(() => {\n\t\t\t\t\t\tthis.props.setDirection(this.directionOnNextTick);\n\t\t\t\t\t\tthis.props.moveSnake(this.props.snake, this.props.slider.boardSize, this.props.game.borderless);\n\t\t\t\t\t}, (2*MAX_GAME_SPEED)-this.props.slider.value); // sets the render interval. For reasonable speeds, the interval is kept high.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// do nothing\n\t\t\t}\n\t\t});\n\t}\n\n\thandleBoardSizeChange = (value) => {\n\t\tthis.props.changeBoardSize(value);\n\t\tthis.resetGame();\n\t}\n\n\thandleGameSpeedChange = (value) => {\n        const speed = value;\n        this.props.changeGameSpeed(speed);\n\t}\n\n\n    handleBorderlessSwitch = () => {\n            this.props.borderless();\n    }\n\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div>\n                <h1 className=\"snakeTitle\">Snake</h1>\n\t\t\t\t<h1 className=\"snakeCurrentScore\">Score: {this.props.game.score}</h1>\n\t\t\t\t<h3 className=\"snakeHighScore\">High Score: {this.props.game.highScore}</h3>\n                <Grid container\n                      spacing={24}\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      className=\"snakeGame\">\n                    {/*<Grid item >\n                    <Slider className=\"sliderComponent\" onChange={this.handleBoardSizeChange}\n                            minValue={MIN_BOARD_SIZE}\n                            maxValue={MAX_BOARD_SIZE}\n                            label=\"Size\"\n                            value={this.props.slider.boardSize} />\n                    </Grid>*/}\n                    <Grid item >\n                    <Slider className=\"sliderComponent\" onChange={this.handleGameSpeedChange}\n                            minValue={MIN_GAME_SPEED}\n                            maxValue={MAX_GAME_SPEED}\n                            label=\"Speed\"\n                            value={this.props.slider.value}/>\n                    </Grid>\n                    <Grid item >\n\t\t\t\t\t<div className=\"snakeBoardWrapper\">\n\t\t\t\t\t\t<Board size={this.props.slider.boardSize}/>\n\t\t\t\t\t\t<Snake coords={this.props.snake.coords} lost={this.props.game.lost} size={this.props.slider.boardSize}/>\n\t\t\t\t\t\t<Food coords={this.props.food} size={this.props.slider.boardSize} />\n\t\t\t\t\t</div>\n                    </Grid>\n                    <Grid item >\n                    <div className=\"borderlessSwitch\">\n                    <Switch className=\"switch\"\n                            onChange={this.handleBorderlessSwitch}\n                            checked={this.props.game.borderless}\n                            onColor={'#7cb342'} /> {/*same color as food elements etc*/}\n                        <p>Borderless?</p>\n                    </div>\n                    </Grid>\n\t\t\t\t</Grid>\n\n\t\t\t\t<p className=\"snakeHelp\">Press spacebar to begin!</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(props) {\n\treturn props;\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn bindActionCreators({\n\t\tmoveSnake,\n\t\tsetFood,\n\t\tsetDirection,\n\t\tprependSnake,\n\t\tnewGame,\n        loseGame,\n\t\tincrementScore,\n\t\tchangeBoardSize,\n        changeGameSpeed,\n        borderless,\n\t}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnakeGame);\n","import { INITIAL_BOARD_SIZE, INITIAL_DIRECTION } from '../constants/constants';\n\n/**\n * Actions for snake manipulation.\n */\nconst INITIAL_STATE = {\n\tdirection: INITIAL_DIRECTION,\n\tcoords: [\n\t\t[Math.floor(INITIAL_BOARD_SIZE/2), 0],\n\t\t[Math.floor(INITIAL_BOARD_SIZE/2), 1],\n\t\t[Math.floor(INITIAL_BOARD_SIZE/2), 2],\n\t]\n};\n\nexport default function(state = INITIAL_STATE, action) {\n\tswitch(action.type) {\n\t\tcase 'MOVE_SNAKE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcoords: action.coords\n\t\t\t}\n\n\t\tcase 'SET_DIRECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdirection: action.direction\n\t\t\t}\n\n\t\tcase 'PREPEND_SNAKE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcoords: [[action.coords], ...state.coords]\n\t\t\t}\n\n\t\tcase 'NEW_GAME':\n\t\t\treturn {\n                direction: INITIAL_DIRECTION,\n                coords: [\n                    [Math.floor(INITIAL_BOARD_SIZE/2), 0],\n                    [Math.floor(INITIAL_BOARD_SIZE/2), 1],\n                    [Math.floor(INITIAL_BOARD_SIZE/2), 2],\n                ]\n\t\t\t};\n\t}\n\n\treturn state;\n}","/**\n * Adds a new piece of food based on the game state.\n */\nconst INITIAL_STATE = [];\n\nexport default function(state = INITIAL_STATE, action) {\n\tswitch(action.type) {\n\t\tcase 'SET_FOOD':\n\t\t\treturn action.food;\n\n\t\tcase 'NEW_GAME':\n\t\t\treturn INITIAL_STATE;\n\t}\n\treturn state;\n}\n","/**\n * Uses the game state to determine game logic.\n */\nconst INITIAL_STATE = {\n\tlost: false,\n\tscore: 0,\n\thighScore: 0,\n}\n\nfunction updateHighScore({ score, highScore }) {\n\treturn score > highScore ? score : highScore;\n}\n\nexport default function(state = INITIAL_STATE, action) {\n\tswitch(action.type) {\n\t\tcase 'LOSE_GAME':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlost: true,\n\t\t\t\thighScore: updateHighScore(state)\n\t\t\t}\n\t\tcase 'NEW_GAME':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: 0,\n\t\t\t\tlost: false\n\t\t\t}\n\t\tcase 'INCREMENT_SCORE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: state.score + 1\n\t\t\t}\n\t\tcase 'BORDERLESS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tborderless: !state.borderless,\n\t\t\t}\n\t}\n\n\treturn state;\n}\n","import {INITIAL_GAME_SPEED, INITIAL_BOARD_SIZE} from \"../constants/constants\";\r\n\r\n/**\r\n * Processes any changes to the slider game size or speed.\r\n */\r\nconst INITIAL_STATE = {\r\n    value: INITIAL_GAME_SPEED,\r\n    boardSize: INITIAL_BOARD_SIZE,\r\n};\r\n\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'CHANGE_GAME_SPEED':\r\n            return {\r\n                ...state,\r\n                value: action.slider\r\n            }\r\n\r\n        case 'CHANGE_BOARD_SIZE':\r\n            return {\r\n                ...state,\r\n                boardSize: action.boardSize\r\n            }\r\n\r\n    }\r\n    return state;\r\n}","import { combineReducers } from 'redux';\nimport snakeReducer from './snake-reducer';\nimport foodReducer from './food-reducer';\nimport gameReducer from './game-reducer';\nimport sliderReducer from './slider-reducer';\n\nconst rootReducer = combineReducers({\n\tsnake: snakeReducer,\n\tfood: foodReducer,\n\tgame: gameReducer,\n\tslider: sliderReducer,\n});\n\nexport default rootReducer;","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport SnakeGame from './SnakeGame';\r\nimport reducer from \"../reducers/reducers\";\r\nimport '../../../styles/buttons/buttons.css';\r\n\r\n/**\r\n * Uses redux to provide the game to the app.\r\n * This enables the re-render cycle to apply the actions.\r\n */\r\nconst store = createStore(reducer);\r\n\r\nexport default class SnakeGameProvider extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Provider store={store} className=\"snakeGame\">\r\n                    <SnakeGame className=\"snake\"/>\r\n                </Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './app.css';\nimport Snake from './components/snake/components/SnakeGameProvider';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"activeSnakeContainer\">\n          <Snake />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}